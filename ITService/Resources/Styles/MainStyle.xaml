<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConv"/>

    <Style x:Key="BorderStyle" TargetType="Border">
        <Setter Property="Background" Value="#252525"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="CornerRadius" Value="10"/>
    </Style>
    <Style x:Key="LabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Margin" Value="5 0 5 0"/>
    </Style>

    <Style x:Key="DatePickerStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder x:Name="placeholder"/>
                        <TextBlock FontSize="12" Foreground="White" 
                                   Text="{Binding ElementName=placeholder,
                    Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="DarkRed"/>
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
            Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="5 0 5 6"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder x:Name="placeholder"/>
                        <TextBlock FontSize="12" Foreground="OrangeRed" 
                                   Text="{Binding ElementName=placeholder,
                            Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="BorderBrush" Value="DarkRed"/>
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
                    Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <!--<Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>-->
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Margin" Value="5 0 5 0"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryTextColor}"/>
    </Style>
    <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#2A2B3C"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                CornerRadius="4"
                SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                              Focusable="False"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Duration="0:0:0.250" To="3" 
                                                        Storyboard.TargetProperty="BorderThickness" />
                                        <DoubleAnimation Duration="0:0:0.150" To="30" 
                                                     Storyboard.TargetProperty="Height" />
                                        <DoubleAnimation Duration="0:0:0.150" To="106" 
                                                     Storyboard.TargetProperty="Width" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Duration="0:0:0.250" To="2" 
                                                        Storyboard.TargetProperty="BorderThickness" />
                                        <DoubleAnimation Duration="0:0:0.150" To="24" 
                                                     Storyboard.TargetProperty="Height" />
                                        <DoubleAnimation Duration="0:0:0.150" To="100" 
                                                     Storyboard.TargetProperty="Width" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#4B4E6D"/>
                            <Setter Property="BorderBrush" Value="#4B4E6D"/>
                            <Setter Property="BorderThickness" Value="2"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryTextColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#2A2B3C"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="100"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                  Focusable="False"
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Duration="0:0:0.250" To="4" 
                                                            Storyboard.TargetProperty="BorderThickness" />
                                        <DoubleAnimation Duration="0:0:0.250" To="120" 
                                                         Storyboard.TargetProperty="Height" />
                                        <DoubleAnimation Duration="0:0:0.250" To="220" 
                                                         Storyboard.TargetProperty="Width" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation Duration="0:0:0.250" To="2" 
                                                            Storyboard.TargetProperty="BorderThickness" />
                                        <DoubleAnimation Duration="0:0:0.250" To="100" 
                                                         Storyboard.TargetProperty="Height" />
                                        <DoubleAnimation Duration="0:0:0.250" To="200" 
                                                         Storyboard.TargetProperty="Width" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#4B4E6D"/>
                            <Setter Property="BorderBrush" Value="#4B4E6D"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PopupButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                      Focusable="False"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#505a66"/>
                            <Setter Property="BorderBrush" Value="#505a66"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#5f6c7a"/>
                            <Setter Property="BorderBrush" Value="#5f6c7a"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="35"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <Viewbox Height="25" Width="25" Margin="0 6 0 0" >
                            <Canvas Height="512" Width="512">
                                <Path Data="m32 0h448c17.671875 0 32 15 32 32s-15 32-32 32h-448c-18 0-32-15-32-32s15-32 32-32zm0 0" Fill="{DynamicResource SecondaryIconColor}" Margin="0 0 0 0"/>
                                <Path Data="m32 128h448c17.671875 0 32 15 32 32s-15 32-32 32h-448c-18 0-32-15-32-32s15-32 32-32zm0 0" Fill="{DynamicResource SecondaryIconColor}" Margin="0 20 0 0"/>
                                <Path Data="m32 256h448c17.671875 0 32 15 32 32s-15 32-32 32h-448c-18 0-32-15-32-32s15-32 32-32zm0 0" Fill="{DynamicResource SecondaryIconColor}" Margin="0 40 0 0"/>
                            </Canvas>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>